(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["bulmaCalendar"] = factory();
	else
		root["bulmaCalendar"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/extension.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/extension.js":
/*!**************************!*\
  !*** ./src/extension.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _languages = __webpack_require__(/*! ./languages */ \"./src/languages.js\");\n\nvar _languages2 = _interopRequireDefault(_languages);\n\n__webpack_require__(/*! ./extension.sass */ \"./src/extension.sass\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nElement.prototype.addEventsListener = function (events) {\n  var _this = this;\n\n  var listener = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n\n  if (!Array.isArray(events)) {\n    events = [events];\n  }\n\n  events.forEach(function (event) {\n    _this.addEventListener(event, listener);\n  });\n};\n\n//export default //MEHHHHH\nmodule.exports = function () {\n  function datePicker(selector) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, datePicker);\n\n    // Determine click event depending on if we are on Touch device or not\n    this._clickEvent = ['touchstart', 'click'];\n\n    this.element = typeof selector === 'string' ? document.querySelector(selector) : selector;\n    // An invalid selector or non-DOM node has been provided.\n    if (!this.element) {\n      throw new Error('An invalid selector or non-DOM node has been provided.');\n    }\n\n    /// Set default options and merge with instance defined\n    this.options = Object.assign({}, {\n      startDate: new Date(),\n      minDate: null,\n      maxDate: null,\n      dateFormat: 'yyyy-mm-dd', // the default data format `field` value\n      lang: 'en', // internationalization\n      overlay: false,\n      closeOnOverlayClick: true,\n      closeOnSelect: true,\n      // callback functions\n      onSelect: null,\n      onOpen: null,\n      onClose: null,\n      onRender: null\n    }, options);\n\n    // Initiate plugin\n    this._init();\n  }\n\n  /**\r\n   * Initiate plugin instance\r\n   * @method _init\r\n   * @return {datePicker} Current plugin instance\r\n   */\n\n\n  _createClass(datePicker, [{\n    key: '_init',\n    value: function _init() {\n      this._id = 'datePicker' + new Date().getTime() + Math.floor(Math.random() * Math.floor(9999));\n      this.lang = typeof _languages2.default[this.lang] !== 'undefined' ? this.lang : 'en';\n      // Set the startDate to the input value\n      if (this.element.value) {\n        this.options.startDate = this._parseDate(this.element.value);\n      }\n      // Transform start date according to dateFormat option\n      this.options.startDate = this._parseDate(this._getFormatedDate(this.options.startDate, this.options.dateFormat));\n\n      if (this.options.minDate) {\n        this.options.minDate = this._parseDate(this._getFormatedDate(this.options.minDate, this.options.dateFormat));\n      }\n      if (this.options.maxDate) {\n        this.options.maxDate = this._parseDate(this._getFormatedDate(this.options.maxDate, this.options.dateFormat));\n      }\n\n      this.month = this.options.startDate.getMonth();\n      this.year = this.options.startDate.getFullYear();\n      this.day = this.options.startDate.getDate();\n      this.open = false;\n\n      this._build();\n      this._bindEvents();\n\n      return this;\n    }\n\n    /**\r\n     * Build datePicker HTML component and append it to the DOM\r\n     * @method _build\r\n     * @return {datePicker} Current plugin instance\r\n     */\n\n  }, {\n    key: '_build',\n    value: function _build() {\n      // Define datePicker Template\n      var datePicker = '\\n      <div id=\\'' + this._id + '\\' class=\"datepicker ' + (this.options.overlay ? 'modal' : '') + '\">\\n        ' + (this.options.overlay ? '<div class=\"modal-background\"></div>' : '') + '\\n        <div class=\"calendar\">\\n          <div class=\"calendar-nav\">\\n            <div class=\"calendar-nav-month\">\\n              <button class=\"calendar-nav-previous-month button is-small is-text\">\\n                <svg viewBox=\"0 0 50 80\" xml:space=\"preserve\">\\n                  <polyline fill=\"none\" stroke-width=\".5em\" stroke-linecap=\"round\" stroke-linejoin=\"round\" points=\"45.63,75.8 0.375,38.087 45.63,0.375 \"/>\\n                </svg>\\n              </button>\\n              <div class=\"calendar-month\">' + _languages2.default[this.options.lang].months[this.month] + '</div>\\n              <button class=\"calendar-nav-next-month button is-small is-text\">\\n                <svg viewBox=\"0 0 50 80\" xml:space=\"preserve\">\\n                  <polyline fill=\"none\" stroke-width=\".5em\" stroke-linecap=\"round\" stroke-linejoin=\"round\" points=\"0.375,0.375 45.63,38.087 0.375,75.8 \"/>\\n              </button>\\n            </div>\\n            <div class=\"calendar-nav-day\">\\n              <div class=\"calendar-day\">' + this.day + '</div>\\n            </div>\\n            <div class=\"calendar-nav-year\">\\n              <button class=\"calendar-nav-previous-year button is-small is-text\">\\n                <svg viewBox=\"0 0 50 80\" xml:space=\"preserve\">\\n                  <polyline fill=\"none\" stroke-width=\".5em\" stroke-linecap=\"round\" stroke-linejoin=\"round\" points=\"45.63,75.8 0.375,38.087 45.63,0.375 \"/>\\n                </svg>\\n              </button>\\n              <div class=\"calendar-year\">' + this.year + '</div>\\n              <button class=\"calendar-nav-next-year button is-small is-text\">\\n                <svg viewBox=\"0 0 50 80\" xml:space=\"preserve\">\\n                  <polyline fill=\"none\" stroke-width=\".5em\" stroke-linecap=\"round\" stroke-linejoin=\"round\" points=\"0.375,0.375 45.63,38.087 0.375,75.8 \"/>\\n              </button>\\n            </div>\\n          </div>\\n          <div class=\"calendar-container\">\\n            <div class=\"calendar-header\">\\n              <div class=\"calendar-date\">' + this._getDayName(0, true) + '</div>\\n              <div class=\"calendar-date\">' + this._getDayName(1, true) + '</div>\\n              <div class=\"calendar-date\">' + this._getDayName(2, true) + '</div>\\n              <div class=\"calendar-date\">' + this._getDayName(3, true) + '</div>\\n              <div class=\"calendar-date\">' + this._getDayName(4, true) + '</div>\\n              <div class=\"calendar-date\">' + this._getDayName(5, true) + '</div>\\n              <div class=\"calendar-date\">' + this._getDayName(6, true) + '</div>\\n            </div>\\n            <div class=\"calendar-body\"></div>\\n          </div>\\n        </div>\\n      </div>\\n    ';\n\n      // Add datepicker HTML element to Document Body\n      document.body.insertAdjacentHTML('beforeend', datePicker);\n\n      // Save pointer to each datePicker element for later use\n      this.datePickerContainer = document.getElementById(this._id);\n      this.datePickerCalendar = this.datePickerContainer.querySelector('.calendar');\n      if (this.options.overlay) {\n        this.datePickerOverlay = this.datePickerContainer.querySelector('.modal-background');\n        this.datePickerCloseButton = this.datePickerContainer.querySelector('.modal-close');\n      }\n      this.datePickerCalendarNav = this.datePickerCalendar.querySelector('.calendar-nav');\n      this.datePickerCalendarNavMonth = this.datePickerCalendar.querySelector('.calendar-month');\n      this.datePickerCalendarNavYear = this.datePickerCalendar.querySelector('.calendar-year');\n      this.datePickerCalendarNavDay = this.datePickerCalendar.querySelector('.calendar-day');\n      this.datePickerCalendarNavPreviousMonth = this.datePickerCalendarNav.querySelector('.calendar-nav-previous-month');\n      this.datePickerCalendarNavNextMonth = this.datePickerCalendarNav.querySelector('.calendar-nav-next-month');\n      this.datePickerCalendarNavPreviousYear = this.datePickerCalendarNav.querySelector('.calendar-nav-previous-year');\n      this.datePickerCalendarNavNextYear = this.datePickerCalendarNav.querySelector('.calendar-nav-next-year');\n      this.datePickerCalendarHeader = this.datePickerCalendar.querySelector('.calendar-header');\n      this.datePickerCalendarBody = this.datePickerCalendar.querySelector('.calendar-body');\n    }\n\n    /**\r\n     * Bind all events\r\n     * @method _bindEvents\r\n     * @return {void}\r\n     */\n\n  }, {\n    key: '_bindEvents',\n    value: function _bindEvents() {\n      var _this2 = this;\n\n      // Bind event to element in order to display/hide datePicker on click\n      this.element.addEventsListener(this._clickEvent, function (e) {\n        e.preventDefault();\n\n        if (_this2.open) {\n          _this2.hide();\n        } else {\n          _this2.show();\n        }\n      });\n\n      if (this.options.overlay) {\n        // Bind close event on Close button\n        if (this.datePickerCloseButton) {\n          this.datePickerCloseButton.addEventsListener(this._clickEvent, function (e) {\n            e.preventDefault();\n            _this2.hide();\n          });\n        }\n        // Bind close event on overlay based on options\n        if (this.options.closeOnOverlayClick) {\n          this.datePickerOverlay.addEventsListener(this._clickEvent, function (e) {\n            e.preventDefault();\n            _this2.hide();\n          });\n        }\n      }\n\n      // Bind year navigation events\n      this.datePickerCalendarNavPreviousYear.addEventsListener(this._clickEvent, function (e) {\n        e.preventDefault();\n        _this2.prevYear();\n      });\n      this.datePickerCalendarNavNextYear.addEventsListener(this._clickEvent, function (e) {\n        e.preventDefault();\n        _this2.nextYear();\n      });\n\n      // Bind month navigation events\n      this.datePickerCalendarNavPreviousMonth.addEventsListener(this._clickEvent, function (e) {\n        e.preventDefault();\n        _this2.prevMonth();\n      });\n      this.datePickerCalendarNavNextMonth.addEventsListener(this._clickEvent, function (e) {\n        e.preventDefault();\n        _this2.nextMonth();\n      });\n    }\n\n    /**\r\n     * Bind events on each Day item\r\n     * @method _bindDaysEvents\r\n     * @return {void}\r\n     */\n\n  }, {\n    key: '_bindDaysEvents',\n    value: function _bindDaysEvents() {\n      var _this3 = this;\n\n      [].forEach.call(this.datePickerCalendarDays, function (calendarDay) {\n        calendarDay.addEventsListener(_this3._clickEvent, function (e) {\n          e.preventDefault();\n          if (!e.currentTarget.classList.contains('is-disabled')) {\n            var date = e.currentTarget.dataset.date.split('-');\n\n            var _date = _slicedToArray(date, 3),\n                year = _date[0],\n                month = _date[1],\n                day = _date[2];\n\n            if (typeof _this3.options.onSelect != 'undefined' && _this3.options.onSelect != null && _this3.options.onSelect) {\n              _this3.options.onSelect(new Date(year, month, day));\n            }\n            _this3.element.value = _this3._getFormatedDate(new Date(year, month, day), _this3.options.dateFormat);\n            if (_this3.options.closeOnSelect) {\n              _this3.hide();\n            }\n          }\n        });\n      });\n    }\n\n    /**\r\n     * Get localized day name\r\n     * @method renderDayName\r\n     * @param  {[type]}      day          [description]\r\n     * @param  {Boolean}     [abbr=false] [description]\r\n     * @return {[type]}                   [description]\r\n     */\n\n  }, {\n    key: '_getDayName',\n    value: function _getDayName(day) {\n      var abbr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      day += _languages2.default[this.options.lang].weekStart;\n      while (day >= 7) {\n        day -= 7;\n      }\n\n      return abbr ? _languages2.default[this.options.lang].weekdaysShort[day] : _languages2.default[this.options.lang].weekdays[day];\n    }\n  }, {\n    key: '_renderDay',\n    value: function _renderDay(day, month, year, isSelected, isToday, isDisabled, isEmpty, isBetween, isSelectedIn, isSelectedOut) {\n      return '\\n      <div data-date=\"' + (year + '-' + month + '-' + day) + '\" class=\"calendar-date' + (isDisabled ? ' is-disabled' : '') + (isBetween ? ' calendar-range' : '') + (isSelectedIn ? ' calendar-range-start' : '') + (isSelectedOut ? ' calendar-range-end' : '') + '\">\\n        <button class=\"date-item' + (isToday ? ' is-today' : '') + (isSelected ? ' is-active' : '') + '\">' + day + '</button>\\n      </div>\\n    ';\n    }\n  }, {\n    key: '_renderDays',\n    value: function _renderDays() {\n      var now = new Date();\n      var days = '';\n\n      var numberOfDays = this._getDaysInMonth(this.year, this.month),\n          before = new Date(this.year, this.month, 1).getDay();\n\n      // Call onRender callback if defined\n      if (typeof this.options.onRender != 'undefined' && this.options.onRender != null && this.options.onRender) {\n        this.options.onRender(this);\n      }\n\n      // Get start day from options\n      if (_languages2.default[this.options.lang].weekStart > 0) {\n        before -= _languages2.default[this.options.lang].weekStart;\n        if (before < 0) {\n          before += 7;\n        }\n      }\n\n      var cells = numberOfDays + before,\n          after = cells;\n      while (after > 7) {\n        after -= 7;\n      }\n\n      cells += 7 - after;\n      for (var i = 0; i < cells; i++) {\n        var day = new Date(this.year, this.month, 1 + (i - before)),\n            isBetween = false,\n            isSelected = this._compareDates(day, this.options.startDate),\n            isSelectedIn = false,\n            isSelectedOut = false,\n            isToday = this._compareDates(day, now),\n            isEmpty = i < before || i >= numberOfDays + before,\n            isDisabled = false;\n\n        day.setHours(0, 0, 0, 0);\n\n        if (!isSelected) {\n          isSelectedIn = false;\n          isSelectedOut = false;\n        }\n\n        if (day.getMonth() !== this.month || this.options.minDate && (day.getTime() < this.options.minDate.getTime() || day.getTime() > this.options.maxDate.getTime())) {\n          isDisabled = true;\n        }\n\n        days += this._renderDay(day.getDate(), this.month, this.year, isSelected, isToday, isDisabled, isEmpty, isBetween, isSelectedIn, isSelectedOut);\n      }\n\n      this.datePickerCalendarBody.insertAdjacentHTML('beforeend', days);\n      this.datePickerCalendarDays = this.datePickerCalendarBody.querySelectorAll('.calendar-date');\n      this._bindDaysEvents();\n    }\n\n    /**\r\n     * Navigate to the previous month and regenerate calendar\r\n     * @method prevMonth\r\n     * @return {void}\r\n     */\n\n  }, {\n    key: 'prevMonth',\n    value: function prevMonth() {\n      this.month -= 1;\n      this._refreshCalendar();\n    }\n  }, {\n    key: '_disablePrevMonth',\n    value: function _disablePrevMonth() {\n      this.datePickerCalendarNavPreviousMonth.setAttribute('disabled', 'disabled');\n    }\n  }, {\n    key: '_enablePrevMonth',\n    value: function _enablePrevMonth() {\n      this.datePickerCalendarNavPreviousMonth.removeAttribute('disabled');\n    }\n\n    /**\r\n     * Navigate to the next month and regenerate calendar\r\n     * @method nextMonth\r\n     * @return {}\r\n     */\n\n  }, {\n    key: 'nextMonth',\n    value: function nextMonth() {\n      this.month += 1;\n      this._refreshCalendar();\n    }\n  }, {\n    key: '_disableNextMonth',\n    value: function _disableNextMonth() {\n      this.datePickerCalendarNavNextMonth.setAttribute('disabled', 'disabled');\n    }\n  }, {\n    key: '_enableNextMonth',\n    value: function _enableNextMonth() {\n      this.datePickerCalendarNavNextMonth.removeAttribute('disabled');\n    }\n\n    /**\r\n     * Navigate to the previous year and regenerate calendar\r\n     * @method prevYear\r\n     * @return {void}\r\n     */\n\n  }, {\n    key: 'prevYear',\n    value: function prevYear() {\n      this.year -= 1;\n      this._refreshCalendar();\n    }\n  }, {\n    key: '_disablePrevYear',\n    value: function _disablePrevYear() {\n      this.datePickerCalendarNavPreviousYear.setAttribute('disabled', 'disabled');\n    }\n  }, {\n    key: '_enablePrevYear',\n    value: function _enablePrevYear() {\n      this.datePickerCalendarNavPreviousYear.removeAttribute('disabled');\n    }\n\n    /**\r\n     * Navigate to the previous year and regenerate calendar\r\n     * @method nextYear\r\n     * @return {}\r\n     */\n\n  }, {\n    key: 'nextYear',\n    value: function nextYear() {\n      this.year += 1;\n      this._refreshCalendar();\n    }\n  }, {\n    key: '_disableNextYear',\n    value: function _disableNextYear() {\n      this.datePickerCalendarNavNextYear.setAttribute('disabled', 'disabled');\n    }\n  }, {\n    key: '_enableNextYear',\n    value: function _enableNextYear() {\n      this.datePickerCalendarNavNextYear.removeAttribute('disabled');\n    }\n\n    /**\r\n     * Show datePicker HTML Component\r\n     * @method show\r\n     * @return {void}\r\n     */\n\n  }, {\n    key: 'show',\n    value: function show() {\n      // Set the startDate to the input value\n      if (this.element.value) {\n        this.options.startDate = this._parseDate(this.element.value);\n      }\n      this.month = this.options.startDate.getMonth();\n      this.year = this.options.startDate.getFullYear();\n      this.day = this.options.startDate.getDate();\n      this._refreshCalendar();\n\n      if (typeof this.options.onOpen != 'undefined' && this.options.onOpen != null && this.options.onOpen) {\n        this.options.onOpen(this);\n      }\n\n      this.datePickerContainer.classList.add('is-active');\n      if (!this.options.overlay) {\n        this._adjustPosition();\n      }\n      this.open = true;\n    }\n\n    /**\r\n     * Hide datePicker HTML Component\r\n     * @method hide\r\n     * @return {void}\r\n     */\n\n  }, {\n    key: 'hide',\n    value: function hide() {\n      this.open = false;\n      if (typeof this.options.onClose != 'undefined' && this.options.onClose != null && this.options.onClose) {\n        this.options.onClose(this);\n      }\n      this.datePickerContainer.classList.remove('is-active');\n    }\n\n    /**\r\n     * Refresh calendar with new year/month days\r\n     * @method _refreshCalendar\r\n     * @return {[type]}        [description]\r\n     */\n\n  }, {\n    key: '_refreshCalendar',\n    value: function _refreshCalendar() {\n      if (this.month < 0) {\n        this.year -= Math.ceil(Math.abs(this.month) / 12);\n        this.month += 12;\n      }\n      if (this.month > 11) {\n        this.year += Math.floor(Math.abs(this.month) / 12);\n        this.month -= 12;\n      }\n      this.datePickerCalendarNavMonth.innerHTML = _languages2.default[this.options.lang].months[this.month];\n      this.datePickerCalendarNavYear.innerHTML = this.year;\n      this.datePickerCalendarNavDay.innerHTML = this.day;\n      this.datePickerCalendarBody.innerHTML = '';\n\n      var minMonth = 0,\n          minYear = 0,\n          maxMonth = 12,\n          maxYear = 9999;\n\n      if (this.options.minDate) {\n        minMonth = this.options.minDate.getMonth();\n        minYear = this.options.minDate.getFullYear();\n      }\n      if (this.options.maxDate) {\n        maxMonth = this.options.maxDate.getMonth();\n        maxYear = this.options.maxDate.getFullYear();\n      }\n\n      if (this.year <= minYear) {\n        this._disablePrevYear();\n      } else {\n        this._enablePrevYear();\n      }\n\n      if (this.year >= maxYear) {\n        this._disableNextYear();\n      } else {\n        this._enableNextYear();\n      }\n\n      if (this.year <= minYear && this.month <= minMonth) {\n        this._disablePrevMonth();\n      } else {\n        this._enablePrevMonth();\n      }\n\n      if (this.year >= maxYear && this.month >= maxMonth) {\n        this._disableNextMonth();\n      } else {\n        this._enableNextMonth();\n      }\n\n      this._renderDays();\n      return this;\n    }\n\n    /**\r\n     * Recalculate calendar position\r\n     * @method _adjustPosition\r\n     * @return {void}\r\n     */\n\n  }, {\n    key: '_adjustPosition',\n    value: function _adjustPosition() {\n      var width = this.datePickerCalendar.offsetWidth,\n          height = this.datePickerCalendar.offsetHeight,\n          viewportWidth = window.innerWidth || document.documentElement.clientWidth,\n          viewportHeight = window.innerHeight || document.documentElement.clientHeight,\n          scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop,\n          left,\n          top,\n          clientRect;\n\n      if (typeof this.element.getBoundingClientRect === 'function') {\n        clientRect = this.element.getBoundingClientRect();\n        left = clientRect.left + window.pageXOffset;\n        top = clientRect.bottom + window.pageYOffset;\n      } else {\n        left = this.element.offsetLeft;\n        top = this.element.offsetTop + this.element.offsetHeight;\n        while (this.element = this.element.offsetParent) {\n          left += this.element.offsetLeft;\n          top += this.element.offsetTop;\n        }\n      }\n\n      this.datePickerCalendar.style.position = 'absolute';\n      this.datePickerCalendar.style.left = left + 'px';\n      this.datePickerCalendar.style.top = top + 'px';\n    }\n\n    /**\r\n     * Destroy datePicker\r\n     * @method destroy\r\n     * @return {[type]} [description]\r\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.datePickerCalendar.remove();\n    }\n\n    /**\r\n     * Returns date according to passed format\r\n     * @method _getFormatedDate\r\n     * @param {Date}   dt     Date object\r\n     * @param {String} format Format string\r\n     *      d    - day of month\r\n     *      dd   - 2-digits day of month\r\n     *      D    - day of week\r\n     *      m    - month number\r\n     *      mm   - 2-digits month number\r\n     *      M    - short month name\r\n     *      MM   - full month name\r\n     *      yy   - 2-digits year number\r\n     *      yyyy - 4-digits year number\r\n     */\n\n  }, {\n    key: '_getFormatedDate',\n    value: function _getFormatedDate(dt, format) {\n      var items = {\n        d: dt.getDate(),\n        dd: dt.getDate(),\n        D: dt.getDay(),\n        m: dt.getMonth() + 1,\n        mm: dt.getMonth() + 1,\n        M: dt.getMonth(),\n        MM: dt.getMonth(),\n        yy: dt.getFullYear().toString().substr(-2),\n        yyyy: dt.getFullYear()\n      };\n\n      items.dd < 10 && (items.dd = '0' + items.dd);\n      items.mm < 10 && (items.mm = '0' + items.mm);\n      items.D = _languages2.default[this.options.lang].weekdays[items.D ? items.D - 1 : 6];\n      items.M = _languages2.default[this.options.lang].monthsShort[items.M];\n      items.MM = _languages2.default[this.options.lang].months[items.MM];\n\n      return format.replace(/(?:[dmM]{1,2}|D|yyyy|yy)/g, function (m) {\n        return typeof items[m] !== 'undefined' ? items[m] : m;\n      });\n    }\n\n    /**\r\n     * Parse Date string based on the Date Format given\r\n     * @method _parseDate\r\n     * @param  {String}   dateString          Date string to parse\r\n     * @param  {[String}   [format=undefined] Date Format\r\n     * @return {Date}                         Date Object initialized with Date String based on the Date Format\r\n     */\n\n  }, {\n    key: '_parseDate',\n    value: function _parseDate(dateString) {\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n      var date = new Date();\n      date.setHours(0, 0, 0, 0);\n\n      if (!format) {\n        format = this.options.dateFormat;\n      }\n\n      var formatPattern = /((?:mm?)|(?:dd?)|(?:yyy?y?))[^0-9]((?:mm?)|(?:dd?)|(?:yyy?y?))[^0-9]((?:mm?)|(?:dd?)|(?:yyy?y?))/i;\n      var datePattern = /(\\d+)[^0-9](\\d+)[^0-9](\\d+)/i;\n\n      var matchFormat = formatPattern.exec(format);\n      if (matchFormat) {\n        var matchDate = datePattern.exec(dateString);\n        if (matchDate) {\n          switch (matchFormat[1][0]) {\n            case 'd':\n              date.setDate(matchDate[1]);\n              break;\n            case 'm':\n              date.setMonth(matchDate[1] - 1);\n              break;\n            case 'y':\n              date.setFullYear(matchDate[1]);\n              break;\n          }\n\n          switch (matchFormat[2][0]) {\n            case 'd':\n              date.setDate(matchDate[2]);\n              break;\n            case 'm':\n              date.setMonth(matchDate[2] - 1);\n              break;\n            case 'y':\n              date.setFullYear(matchDate[2]);\n              break;\n          }\n\n          switch (matchFormat[3][0]) {\n            case 'd':\n              date.setDate(matchDate[3]);\n              break;\n            case 'm':\n              date.setMonth(matchDate[3] - 1);\n              break;\n            case 'y':\n              date.setFullYear(matchDate[3]);\n              break;\n          }\n        }\n      }\n\n      return date;\n    }\n\n    /**\r\n     * Check if given year is LeapYear or not\r\n     * @method _isLeapYear\r\n     * @param  {Integer}   year Year to check\r\n     * @return {Boolean}        True if LeapYear then False\r\n     */\n\n  }, {\n    key: '_isLeapYear',\n    value: function _isLeapYear(year) {\n      // solution by Matti Virkkunen: http://stackoverflow.com/a/4881951\n      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n    }\n\n    /**\r\n     * Get the number of days in month\r\n     * @method _getDaysInMonth\r\n     * @param  {Integer}       year  Year to check if we are facing a leapyear or not\r\n     * @param  {Integer}       month Month for which we want to know the amount of days\r\n     * @return {Integer}              Days amount\r\n     */\n\n  }, {\n    key: '_getDaysInMonth',\n    value: function _getDaysInMonth(year, month) {\n      return [31, this._isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];\n    }\n\n    /**\r\n     * Compare two dates\r\n     * @method _compareDates\r\n     * @param  {Date}     a First date to compare\r\n     * @param  {Date}     b Second Date to compare with\r\n     * @return {Boolean}    True if dates are equal then false\r\n     */\n\n  }, {\n    key: '_compareDates',\n    value: function _compareDates(a, b) {\n      // weak date comparison\n      a.setHours(0, 0, 0, 0);\n      b.setHours(0, 0, 0, 0);\n      return a.getTime() === b.getTime();\n    }\n  }]);\n\n  return datePicker;\n}();\n\n//# sourceURL=webpack://bulmaCalendar/./src/extension.js?");

/***/ }),

/***/ "./src/extension.sass":
/*!****************************!*\
  !*** ./src/extension.sass ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n\n//# sourceURL=webpack://bulmaCalendar/./src/extension.sass?");

/***/ }),

/***/ "./src/languages.js":
/*!**************************!*\
  !*** ./src/languages.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = {\n  ar: {\n    weekStart: 0,\n    previousMonth: 'الشهر الماضي',\n    nextMonth: 'الشهر القادم',\n    months: ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'],\n    monthsShort: ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'],\n    weekdays: ['السبت', 'الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة'],\n    weekdaysShort: ['السبت', 'الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة']\n  },\n  bn: {\n    weekStart: 1,\n    months: ['জানুয়ারী', 'ফেব্রুয়ারি', 'মার্চ', 'এপ্রিল', 'মে', 'জুন', 'জুলাই', 'অগাস্ট', 'সেপ্টেম্বর', 'অক্টোবর', 'নভেম্বর', 'ডিসেম্বর'],\n    monthsShort: ['জানুয়ারী', 'ফেব্রুয়ারি', 'মার্চ', 'এপ্রিল', 'মে', 'জুন', 'জুলাই', 'অগাস্ট', 'সেপ্টেম্বর', 'অক্টোবর', 'নভেম্বর', 'ডিসেম্বর'],\n    weekdays: ['রবিবার', 'সোমবার', 'মঙ্গলবার', 'বুধবার', 'বৃহস্পতিবার', 'শুক্রবার', 'শনিবার'],\n    weekdaysShort: ['রবিবার', 'সোমবার', 'মঙ্গলবার', 'বুধবার', 'বৃহস্পতিবার', 'শুক্রবার', 'শনিবার']\n  },\n  de: {\n    weekStart: 1,\n    previousMonth: 'Vorheriger Monat',\n    nextMonth: 'Nächster Monat',\n    months: ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],\n    monthsShort: ['Jan', 'Febr', 'März', 'Apr', 'Mai', 'Juni', 'Juli', 'Aug', 'Sept', 'Okt', 'Nov', 'Dez'],\n    weekdays: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'],\n    weekdaysShort: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa']\n  },\n  en: {\n    weekStart: 1,\n    previousMonth: 'Previous Month',\n    nextMonth: 'Next Month',\n    months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n  },\n  es: {\n    weekStart: 1,\n    previousMonth: 'Mes anterior',\n    nextMonth: 'Próximo mes',\n    months: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],\n    monthsShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],\n    weekdays: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],\n    weekdaysShort: ['Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab']\n  },\n  fa: {\n    weekStart: 1,\n    months: ['ژانویه', 'فوریه', 'مارس', 'آوریل', 'مه', 'ژوئن', 'ژوئیه', 'اوت', 'سپتامبر', 'اکتبر', 'نوامبر', 'دسامبر'],\n    monthsShort: ['ژان', 'فور', 'مار', 'آور', 'مه', 'ژون', 'ژوی', 'اوت', 'سپت', 'اکت', 'نوا', 'دسا'],\n    weekdays: ['یک‌شنبه', 'دوشنبه', 'سه‌شنبه', 'چهارشنبه', 'پنج‌شنبه', 'جمعه', 'شنبه', 'یک‌شنبه'],\n    weekdaysShort: ['یک', 'دو', 'سه', 'چهار', 'پنج', 'جمعه', 'شنبه', 'یک']\n  },\n  fr: {\n    weekStart: 1,\n    previousMonth: 'Mois précédent',\n    nextMonth: 'Mois suivant',\n    months: ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'],\n    monthsShort: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin', 'Juil', 'Auo', 'Sep', 'Oct', 'Nov', 'Déc'],\n    weekdays: ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'],\n    weekdaysShort: ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam']\n  },\n  hi: {\n    weekStart: 1,\n    months: ['जनवरी', 'फ़रवरी', 'मार्च', 'अप्रैल', 'मई', 'जून', 'जुलाई', 'अगस्त', 'सितम्बर', 'अक्टूबर', 'नवंबर', 'दिसम्बर'],\n    monthsShort: ['जन', 'फ़रवरी', 'मार्च', 'अप्रैल', 'मई', 'जून', 'जुलाई', 'अगस्त', 'सितं', 'अक्टूबर', 'नवं', 'दिसम्बर'],\n    weekdays: ['रविवार', 'सोमवार', 'मंगलवार', 'बुधवार', 'गुरुवार', 'शुक्रवार', 'शनिवार'],\n    weekdaysShort: ['सूर्य', 'सोम', 'मंगल', 'बुध', 'गुरु', 'शुक्र', 'शनि']\n  },\n  hr: {\n    weekStart: 2,\n    previousMonth: 'Prošli mjesec',\n    nextMonth: 'Slijedeći mjesec',\n    months: ['siječanj', 'veljača', 'ožujak', 'travanj', 'svibanj', 'lipanj', 'srpanj', 'kolovoz', 'rujan', 'listopad', 'studeni', 'prosinac'],\n    monthsShort: ['sij', 'velj', 'ožu', 'tra', 'svi', 'lip', 'srp', 'kol', 'ruj', 'lis', 'stu', 'pro'],\n    weekdays: ['nedjelja', 'ponedjeljak', 'utorak', 'srijeda', 'četvrtak', 'petak', 'subota'],\n    weekdaysShort: ['ned', 'pon', 'uto', 'sri', 'čet', 'pet', 'sub']\n  },\n  id: {\n    weekStart: 1,\n    months: ['Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember'],\n    monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Ags', 'Sep', 'Okt', 'Nov', 'Des'],\n    weekdays: ['Minggu', 'Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'Sabtu'],\n    weekdaysShort: ['Mgu', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab']\n  },\n  it: {\n    weekStart: 1,\n    previousMonth: 'Mese Precedente',\n    nextMonth: 'Prossimo Mese',\n    months: ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'],\n    monthsShort: ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu', 'Lug', 'Ago', 'Set', 'Ott', 'Nov', 'Dic'],\n    weekdays: ['Domenica', 'Lunedì', 'Martedì', 'Mercoledì', 'Giovedì', 'Venerdì', 'Sabato'],\n    weekdaysShort: ['Dom', 'Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab']\n  },\n  ja: {\n    weekStart: 1,\n    months: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],\n    monthsShort: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],\n    weekdays: ['日曜', '月曜', '火曜', '水曜', '木曜', '金曜', '土曜'],\n    weekdaysShort: ['日', '月', '火', '水', '木', '金', '土']\n  },\n  pt: {\n    weekStart: 1,\n    months: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],\n    monthsShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],\n    weekdays: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],\n    weekdaysShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb']\n  },\n  'pt-BR': {\n    weekStart: 1,\n    previousMonth: 'Mês anterior',\n    nextMonth: 'Próximo mês',\n    months: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],\n    monthsShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],\n    weekdays: ['Domingo', 'Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'Sábado'],\n    weekdaysShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb']\n  },\n  ru: {\n    weekStart: 1,\n    previousMonth: 'Предыдущий месяц',\n    nextMonth: 'Следующий месяц',\n    months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],\n    monthsShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],\n    weekdays: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],\n    weekdaysShort: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб']\n  },\n  sr: {\n    weekStart: 2,\n    previousMonth: 'Prošli mesec',\n    nextMonth: 'Sledeći mesec',\n    months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],\n    monthsShort: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'avg', 'sep', 'okt', 'nov', 'dec'],\n    weekdays: ['nedelja', 'ponedeljak', 'utorak', 'sreda', 'četvrtak', 'petak', 'subota'],\n    weekdaysShort: ['ned', 'pon', 'uto', 'sre', 'čet', 'pet', 'sub']\n  },\n  th: {\n    weekStart: 1,\n    previousMonth: 'เดือนก่อนหน้า',\n    nextMonth: 'เดือนถัดไป',\n    months: ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'],\n    monthsShort: ['ม.ค.', 'ก.พ.', 'มี.ค.', 'เม.ย.', 'พ.ค.', 'มิ.ย.', 'ก.ค.', 'ส.ค.', 'ก.ย.', 'ต.ค.', 'พ.ย.', 'ธ.ค.'],\n    weekdays: ['อาทิตย์', 'จันทร์', 'อังคาร', 'พุธ', 'พฤหัสบดี', 'ศุกร์', 'เสาร์'],\n    weekdaysShort: ['อา.', 'จ.', 'อ.', 'พ.', 'พฤ.', 'ศ.', 'ส.']\n  },\n  tr: {\n    weekStart: 1,\n    previousMonth: 'Önceki Ay',\n    nextMonth: 'Gelecek Ay',\n    months: ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran', 'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'],\n    monthsShort: ['Oca', 'Şub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Ağu', 'Eyl', 'Eki', 'Kas', 'Ara'],\n    weekdays: ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'],\n    weekdaysShort: ['Paz', 'Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt']\n  },\n  'zh-cn': {\n    weekStart: 1,\n    previousMonth: '上个月',\n    nextMonth: '下个月',\n    months: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],\n    monthsShort: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],\n    weekdays: ['星期天', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],\n    weekdaysShort: ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\n  }\n};\n\n//# sourceURL=webpack://bulmaCalendar/./src/languages.js?");

/***/ })

/******/ });
});